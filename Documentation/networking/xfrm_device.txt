
===============================================
XFRM device - offloading the IPsec computations
===============================================
Shannon Nelson <shannon.nelson@oracle.com>


Overview
========

IPsec is a useful feature for securing network traffic, but the
computational cost is high: a 10Gbps link can easily be brought down
to under 1Gbps, depending on the traffic and link configuration.
Luckily, there are NICs that offer a hardware based IPsec offload which
can radically increase throughput and decrease CPU utilization.  The XFRM
Device interface allows NIC drivers to offer to the stack access to the
hardware offload.
IPsec是保护网络流量的有用特性，但计算成本较高：10Gbps链路可以轻松降至低于1Gbps，
这取决于流量和链路配置。幸运的是，有些网卡提供基于硬件的IPsec卸载，可以大幅提高吞吐量并减少CPU使用率。
XFRM设备接口允许网卡驱动向堆栈提供对硬件卸载的访问。

Userland access to the offload is typically through a system such as
libreswan or KAME/raccoon, but the iproute2 'ip xfrm' command set can
be handy when experimenting.  An example command might look something
like this:
用户态对卸载的访问通常是通过一个系统，例如libreswan 或 KAME/raccoon，但 iproute2 'ip xfrm' 命令集可以
实验时要得心应手。一个示例命令可能看起来像这样：

  ip x s add proto esp dst 14.0.0.70 src 14.0.0.52 spi 0x07 mode transport \
     reqid 0x07 replay-window 32 \
     aead 'rfc4106(gcm(aes))' 0x44434241343332312423222114131211f4f3f2f1 128 \
     sel src 14.0.0.52/24 dst 14.0.0.70/24 proto tcp \
     offload dev eth4 dir in

Yes, that's ugly, but that's what shell scripts and/or libreswan are for.
是的，这很丑陋，但这就是 shell 脚本和/或 libreswan 的用途。


Callbacks to implement
实现的回调函数
======================

/* from include/linux/netdevice.h */
struct xfrmdev_ops {
	int	(*xdo_dev_state_add) (struct xfrm_state *x);
	void	(*xdo_dev_state_delete) (struct xfrm_state *x);
	void	(*xdo_dev_state_free) (struct xfrm_state *x);
	bool	(*xdo_dev_offload_ok) (struct sk_buff *skb,
				       struct xfrm_state *x);
	void    (*xdo_dev_state_advance_esn) (struct xfrm_state *x);
};

The NIC driver offering ipsec offload will need to implement these
callbacks to make the offload available to the network stack's
XFRM subsytem.  Additionally, the feature bits NETIF_F_HW_ESP and
NETIF_F_HW_ESP_TX_CSUM will signal the availability of the offload.
提供IPsec卸载的NIC驱动程序需要实现这些回调函数，以将卸载提供给网络堆栈的XFRM子系统。
此外，特性标志NETIF_F_HW_ESP和NETIF_F_HW_ESP_TX_CSUM将指示卸载的可用性。


Flow
====

At probe time and before the call to register_netdev(), the driver should
set up local data structures and XFRM callbacks, and set the feature bits.
The XFRM code's listener will finish the setup on NETDEV_REGISTER.
在探测时间和在调用register_netdev()之前，驱动程序应该设置本地数据结构和XFRM回调函数，并设置特性位。XFRM代码的监听器将在NETDEV_REGISTER上完成设置。

		adapter->netdev->xfrmdev_ops = &ixgbe_xfrmdev_ops;
		adapter->netdev->features |= NETIF_F_HW_ESP;
		adapter->netdev->hw_enc_features |= NETIF_F_HW_ESP;

When new SAs are set up with a request for "offload" feature, the
driver's xdo_dev_state_add() will be given the new SA to be offloaded
and an indication of whether it is for Rx or Tx.  The driver should
	- verify the algorithm is supported for offloads
	- store the SA information (key, salt, target-ip, protocol, etc)
	- enable the HW offload of the SA
	- return status value:
		0             success
		-EOPNETSUPP   offload not supported, try SW IPsec
		other         fail the request

The driver can also set an offload_handle in the SA, an opaque void pointer
that can be used to convey context into the fast-path offload requests.

		xs->xso.offload_handle = context;


When the network stack is preparing an IPsec packet for an SA that has
been setup for offload, it first calls into xdo_dev_offload_ok() with
the skb and the intended offload state to ask the driver if the offload
will serviceable.  This can check the packet information to be sure the
offload can be supported (e.g. IPv4 or IPv6, no IPv4 options, etc) and
return true of false to signify its support.
当网络堆栈为已设置卸载的SA准备IPsec数据包时，它首先使用skb和想要卸载的状态调用xdo_dev_offload_ok()，询问驱动程序是否可卸载服务。这可以检查数据包信息，以确保可以支持卸载（例如，IPv4或IPv6，无IPv4选项等），并返回true或false来表示其支持程度。

When ready to send, the driver needs to inspect the Tx packet for the
offload information, including the opaque context, and set up the packet
send accordingly.
在准备发送时，驱动程序需要检查Tx数据包的卸载信息，包括不透明上下文，并相应地设置数据包发送。

		xs = xfrm_input_state(skb);
		context = xs->xso.offload_handle;
		set up HW for send

The stack has already inserted the appropriate IPsec headers in the
packet data, the offload just needs to do the encryption and fix up the
header values.


When a packet is received and the HW has indicated that it offloaded a
decryption, the driver needs to add a reference to the decoded SA into
the packet's skb.  At this point the data should be decrypted but the
IPsec headers are still in the packet data; they are removed later up
the stack in xfrm_input().

	find and hold the SA that was used to the Rx skb
		get spi, protocol, and destination IP from packet headers
		xs = find xs from (spi, protocol, dest_IP)
		xfrm_state_hold(xs);

	store the state information into the skb
		skb->sp = secpath_dup(skb->sp);
		skb->sp->xvec[skb->sp->len++] = xs;
		skb->sp->olen++;

	indicate the success and/or error status of the offload
		xo = xfrm_offload(skb);
		xo->flags = CRYPTO_DONE;
		xo->status = crypto_status;

	hand the packet to napi_gro_receive() as usual

In ESN mode, xdo_dev_state_advance_esn() is called from xfrm_replay_advance_esn().
Driver will check packet seq number and update HW ESN state machine if needed.
在ESN模式下，xdo_dev_state_advance_esn()从xfrm_replay_advance_esn()调用。驱动程序将检查数据包序列号，并在需要时更新硬件ESN状态机。

When the SA is removed by the user, the driver's xdo_dev_state_delete()
is asked to disable the offload.  Later, xdo_dev_state_free() is called
from a garbage collection routine after all reference counts to the state
have been removed and any remaining resources can be cleared for the
offload state.  How these are used by the driver will depend on specific
hardware needs.
当用户删除SA时，将要求驱动程序的xdo_dev_state_delete()禁用卸载。稍后，在所有状态的引用计数被删除并且可以清除所有剩余资源以用于卸载状态之后，将从垃圾回收例程中调用xdo_dev_state_free()。这些如何由驱动程序使用将取决于特定的硬件需求。

As a netdev is set to DOWN the XFRM stack's netdev listener will call
xdo_dev_state_delete() and xdo_dev_state_free() on any remaining offloaded
states.
当netdev设置为DOWN时，XFRM堆栈的netdev监听器将在任何剩余的卸载状态上调用xdo_dev_state_delete()和xdo_dev_state_free()。


