	CPU Scheduler implementation hints for architecture specific code
   针对特定架构代码的CPU调度器实现提示

	Nick Piggin, 2005

Context switch
上下文切换
==============
1. Runqueue locking
1. 运行队列锁定
By default, the switch_to arch function is called with the runqueue
locked. This is usually not a problem unless switch_to may need to
take the runqueue lock. This is usually due to a wake up operation in
the context switch. See arch/ia64/include/asm/switch_to.h for an example.
默认情况下，switch_to架构函数是在锁定运行队列的情况下调用的。除非switch_to需要延迟运行队列锁定的情况，
否则通常不会出现问题。这通常是由于上下文切换中的唤醒操作引起的。可以参考arch/ia64/include/asm/switch_to.h中的示例。

To request the scheduler call switch_to with the runqueue unlocked,
you must `#define __ARCH_WANT_UNLOCKED_CTXSW` in a header file
(typically the one where switch_to is defined).
如需请求调度程序在不锁定运行队列的情况下调用switch_to，必须在头文件中（通常是定义switch_to的头文件）中定义 `#define __ARCH_WANT_UNLOCKED_CTXSW`。

Unlocked context switches introduce only a very minor performance
penalty to the core scheduler implementation in the CONFIG_SMP case.
在CONFIG_SMP情况下，不锁定上下文切换对核心调度程序实现只会引入很小的性能损失。

CPU idle
CPU空闲
========
Your cpu_idle routines need to obey the following rules:
你的cpu_idle例程需遵守以下规则：

1. Preempt should now disabled over idle routines. Should only
   be enabled to call schedule() then disabled again.
   在cpu_idle例程中应禁用抢占。只能在调用schedule()时启用，然后再次禁用。

2. need_resched/TIF_NEED_RESCHED is only ever set, and will never
   be cleared until the running task has called schedule(). Idle
   threads need only ever query need_resched, and may never set or
   clear it.
   need_resched / TIF_NEED_RESCHED 只会被设置，直到正在运行的任务调用schedule()之前永远不会被清除。空闲线程只需要查询need_resched，不允许设置或清除它。

3. When cpu_idle finds (need_resched() == 'true'), it should call
   schedule(). It should not call schedule() otherwise.
   当cpu_idle发现（need_resched() == 'true'）时，应该调用schedule()。否则不应该调用schedule()。

4. The only time interrupts need to be disabled when checking
   need_resched is if we are about to sleep the processor until
   the next interrupt (this doesn't provide any protection of
   need_resched, it prevents losing an interrupt).
   检查need_resched时唯一需要禁用中断的情况是，如果我们要将处理器休眠直到下一个中断（这并不提供对need_resched的保护，而是防止丢失中断）。

	4a. Common problem with this type of sleep appears to be:
	        local_irq_disable();
	        if (!need_resched()) {
	                local_irq_enable();
	                *** resched interrupt arrives here ***
	                __asm__("sleep until next interrupt");
	        }

5. TIF_POLLING_NRFLAG can be set by idle routines that do not
   need an interrupt to wake them up when need_resched goes high.
   In other words, they must be periodically polling need_resched,
   although it may be reasonable to do some background work or enter
   a low CPU priority.
   TIF_POLLING_NRFLAG可以由不需要中断唤醒的空闲程序设置，当need_resched变高时，它们不需要中断唤醒。换句话说，它们必须周期性地轮询need_resched，尽管可以进行一些后台工作或进入低CPU优先级。

   	5a. If TIF_POLLING_NRFLAG is set, and we do decide to enter
	    an interrupt sleep, it needs to be cleared then a memory
	    barrier issued (followed by a test of need_resched with
	    interrupts disabled, as explained in 3).
       如果TIF_POLLING_NRFLAG被设置，并且我们决定进入中断睡眠，则需要先清除它，然后发出内存屏障（随后在禁用中断的情况下测试need_resched，如3所述）。

arch/x86/kernel/process.c has examples of both polling and
sleeping idle functions.


Possible arch/ problems
=======================

Possible arch problems I found (and either tried to fix or didn't):

ia64 - is safe_halt call racy vs interrupts? (does it sleep?) (See #4a)

sh64 - Is sleeping racy vs interrupts? (See #4a)

sparc - IRQs on at this point(?), change local_irq_save to _disable.
      - TODO: needs secondary CPUs to disable preempt (See #1)

